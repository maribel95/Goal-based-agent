Exemples:

		
	endavant();

=====================


        estat = estatCombat();
        endavant();
        if (hiHaParetDavant(30)) enrere();

=====================

    private boolean hiHaParetDavant(int dist)
    {

       if ((estat.objecteVisor[ESQUERRA]== PARET && estat.distanciaVisors[ESQUERRA]<=dist) ||
          (estat.objecteVisor[CENTRAL ]== PARET && estat.distanciaVisors[CENTRAL ]<=dist) ||
          (estat.objecteVisor[DRETA   ]== PARET && estat.distanciaVisors[DRETA   ]<=dist))
           return true;
       else
           return false;
    }

=====================

        if (repeteix != 0) {
            repeteix--;
        } else {
            atura();
            estat = estatCombat();
            endavant();
            if (hiHaParetDavant(30)) {
                atura();
                esquerra();
                repeteix = 5;
            }
        }

=====================


    public void avaluaComportament() {
        if (repeteix != 0) {
            repeteix--;
        } else {
            atura();
            estat = estatCombat();
            endavant();
            if (hiHaParetDavant(10)) {
                enrere();
                dreta();
                repeteix = 5;
            }
            else
                if (hiHaParetDavant(70))
                {
                    double distEsquerra = 9999;
                    double distDreta = 9999;
                    if (estat.objecteVisor[ESQUERRA]!=RES) distEsquerra = estat.distanciaVisors[ESQUERRA];
                    if (estat.objecteVisor[DRETA]!=RES) distDreta = estat.distanciaVisors[DRETA];
                    
                    if (distEsquerra < distDreta) dreta();
                    if (distDreta < distEsquerra) esquerra();
                }
        }

=====================


    public void avaluaComportament() {
        if (repeteix != 0) {
            repeteix--;
        } else {
            atura();
            estat = estatCombat();
            endavant();
            if (hiHaParetDavant(10)) {
                enrere();
                if (lliureDreta()) esquerra();
                else dreta();
                repeteix = 5;
            }
            else
                if (hiHaParetDavant(70))
                {
                    double distEsquerra = 9999;
                    double distDreta = 9999;
                    if (estat.objecteVisor[ESQUERRA]!=RES) distEsquerra = estat.distanciaVisors[ESQUERRA];
                    if (estat.objecteVisor[DRETA]!=RES) distDreta = estat.distanciaVisors[DRETA];
                    
                    if (distEsquerra < distDreta) dreta();
                    if (distDreta < distEsquerra) esquerra();
                }
        }
    }
    
    boolean lliureDreta() {
        double distEsquerra = 9999;
        double distDreta = 9999;
        if (estat.objecteVisor[ESQUERRA] != RES) {
            distEsquerra = estat.distanciaVisors[ESQUERRA];
        }
        if (estat.objecteVisor[DRETA] != RES) {
            distDreta = estat.distanciaVisors[DRETA];
        }

        if (distEsquerra < distDreta) {
            return true;
        } else {
            return false;
        }
    }


====================

            if (estat.veigAlgunRecurs)
            {
                for (int i=0; i<estat.numObjectes;i++)
                    if (estat.objectes[i].agafaTipus() == Estat.ESCUT)
                        mira(estat.objectes[i]);
            }


===================
tot

    public void avaluaComportament() {
        if (repeteix != 0) {
            repeteix--;
        } else {
            atura();
            estat = estatCombat();
            
            camina();
            if (estat.veigAlgunRecurs)
            {
                for (int i=0; i<estat.numObjectes;i++)
                    if (estat.objectes[i].agafaTipus() == Estat.ESCUT)
                        mira(estat.objectes[i]);
            }
        }
    }
    
  
    private void camina()
    {
        endavant();
          
            if (hiHaParetDavant(10)) {
                enrere();
                if (r.nextInt(100) < 50) dreta();
                else esquerra();
                repeteix = 5;
            }
            else
                if (hiHaParetDavant(70))
                {
                    double distEsquerra = 9999;
                    double distDreta = 9999;
                    if (estat.objecteVisor[ESQUERRA]!=RES) distEsquerra = estat.distanciaVisors[ESQUERRA];
                    if (estat.objecteVisor[DRETA]!=RES) distDreta = estat.distanciaVisors[DRETA];
                    
                    if (distEsquerra < distDreta) dreta();
                    if (distDreta < distEsquerra) esquerra();
                }
    }
    
    private boolean lliureDreta() {
        double distEsquerra = 9999;
        double distDreta = 9999;
        if (estat.objecteVisor[ESQUERRA] != RES) {
            distEsquerra = estat.distanciaVisors[ESQUERRA];
        }
        if (estat.objecteVisor[DRETA] != RES) {
            distDreta = estat.distanciaVisors[DRETA];
        }

        if (distEsquerra < distDreta) {
            return true;
        } else {
            return false;
        }
    }
    
    private boolean hiHaParetDavant(int dist)
    {

       if (estat.objecteVisor[ESQUERRA]== PARET && estat.distanciaVisors[ESQUERRA]<=dist)
           return true;

       if (estat.objecteVisor[CENTRAL ]== PARET && estat.distanciaVisors[CENTRAL ]<=dist)
           return true;

       if (estat.objecteVisor[DRETA   ]== PARET && estat.distanciaVisors[DRETA   ]<=dist)
           return true;
       
       return false;
    }
}

